cmake_minimum_required(VERSION 3.16.0 FATAL_ERROR) # Configurable policies: <= CMP0097

# This is the script that actually creates the pkg-config file,
# It is a template that is generated during the generation stage of the CMake build.
# It is only actually executed at install time.

include("@_expanded_variables_file@")

# Helper function to transform a CMake list into a space-separated string, prepending each element
# with the specified prefix.
# This is used to create the values of the `Cflags`, `Libs`, etc fields in the pkg-config file.
# Arguments:
# - RESULT_VAR: variable that will contain the resulting list in the parent scope
# - LIST: The CMake list to be transformed. the original list is not mutated.
# - PREFIX: The prefix to prepend to each list element.
function(cmake_list_to_pkg_config_value_str)

	set(options "")
	set(oneValueArgs RESULT_VAR LIST PREFIX)
	set(multiValueArgs "")

	cmake_parse_arguments(
		PARSE_ARGV 0
		ARG
		"${options}" "${oneValueArgs}" "${multiValueArgs}"
	)

	# create copy of list with all empty elements removed
	set(_tmp_list "${ARG_LIST}")
	list(REMOVE_DUPLICATES _tmp_list)
	list(REMOVE_ITEM _tmp_list "")

	# at this point, some items might have the desired prefix, some not
	# remove and append prefix to all items to ensure all end up with the desired prefix
	if (ARG_PREFIX)
		string(REGEX REPLACE "(^|;)(${ARG_PREFIX})" "\\1" _tmp_list "${_tmp_list}")
		string(REGEX REPLACE "([^;]+)" "${ARG_PREFIX}\\1" _tmp_list "${_tmp_list}")
	endif()

	# transform CMake list into a space delimited string
	string(REPLACE ";" " " _tmp_list "${_tmp_list}")

	set(${ARG_RESULT_VAR} "${_tmp_list}" PARENT_SCOPE)
endfunction()

# Helper function for splitting full library paths into [dir, name]
# - RESULT_LIB_DIRS: variable that will contain the resulting list of library directories in the parent scope
# - RESULT_LIB_NAMES: variable that will contain the resulting list of library names in the parent scope
# - LIB_FILES: A CMake list of the files that are interface link libraries of the target
function(split_library_dirs)

	set(options "")
	set(oneValueArgs RESULT_LIB_DIRS RESULT_LIB_NAMES LIB_FILES)
	set(multiValueArgs "")

	cmake_parse_arguments(
		PARSE_ARGV 0
		ARG
		"${options}" "${oneValueArgs}" "${multiValueArgs}"
	)

	# TODO: replace calls to get_filename_component() with cmake_path(...)
	# and file(REAL_PATH ...) if needed in CMake >= 3.19
	foreach (lib IN LISTS ARG_LIB_FILES)
		get_filename_component(lDir "${lib}" DIRECTORY)
		if (lDir)
			get_filename_component(lDir "${lDir}" REALPATH)
		endif()
		get_filename_component(lFile "${lib}" NAME_WE)
		string(REPLACE "${_SHARED_LIBRARY_PREFIX}" "" lFile "${lFile}")

		list(APPEND _libdirs "${lDir}")
		list(APPEND _libs_result "${lFile}")
	endforeach()

	set(${ARG_RESULT_LIB_DIRS} "${_libdirs}" PARENT_SCOPE)
	set(${ARG_RESULT_LIB_NAMES} "${_libs_result}" PARENT_SCOPE)
endfunction()

#------------------------------------------------------------------------------
# create string value to be appended to the `Libs:` field of the pkg-config file
#------------------------------------------------------------------------------
split_library_dirs(
	RESULT_LIB_DIRS "_library_directories"
	RESULT_LIB_NAMES "_library_names"
	LIB_FILES "${_TARGET_INTERFACE_LINK_LIBRARIES}"
)

# remove standard {include,link} directories and libraries
foreach (d IN LISTS _CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES _CMAKE_CXX_IMPLICIT_LINK_LIBRARIES _CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES)
	list(REMOVE_ITEM _TARGET_INTERFACE_INCLUDE_DIRS "${d}")
	list(REMOVE_ITEM _library_directories "${d}")
endforeach()

cmake_list_to_pkg_config_value_str(
	RESULT_VAR _interface_link_libraries
	LIST "${_library_names}"
	PREFIX "-l"
)

cmake_list_to_pkg_config_value_str(
	RESULT_VAR _interface_link_library_directories
	LIST "${_library_directories}"
	PREFIX "-L"
)

cmake_list_to_pkg_config_value_str(
	RESULT_VAR _interface_link_options
	LIST "${_TARGET_INTERFACE_LINK_OPTIONS}"
	PREFIX ""
)

set(_libs_field_append_value "${_interface_link_library_directories} ${_interface_link_libraries} ${_interface_link_options}")

#------------------------------------------------------------------------------
# create string value for the `Cflags:` field of the pkg-config file
#------------------------------------------------------------------------------
cmake_list_to_pkg_config_value_str(
	RESULT_VAR _interface_compile_definitions
	LIST "${_TARGET_INTERFACE_DEFINITIONS}"
	PREFIX "-D"
)
cmake_list_to_pkg_config_value_str(
	RESULT_VAR _interface_include_dirs
	LIST "${_TARGET_INTERFACE_INCLUDE_DIRS}"
	PREFIX "-I"
)
cmake_list_to_pkg_config_value_str(
	RESULT_VAR _interface_compile_options
	LIST "${_TARGET_INTERFACE_COMPILE_OPTIONS}"
	PREFIX ""
)

set(_cflags_field_value "${_interface_compile_options} ${_interface_include_dirs} ${_interface_compile_definitions}")

#------------------------------------------------------------------------------
# create pkg-config file from template and install it
#------------------------------------------------------------------------------
configure_file(
	"@_pkg_config_template_file@"
	"@_generate_target_dir@/@_package_name@.pc"
	@ONLY
)

# Define this variable when running this script from a custom target for inspection
if (NOT PKGCONFIG_SKIP_INSTALL)
	file(INSTALL
		"@_generate_target_dir@/@_package_name@.pc"
		DESTINATION "@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@/pkgconfig"
	)
endif()
