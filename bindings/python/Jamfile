import python ;
import feature ;
import feature : feature ;
import project ;
import targets ;
import "class" : new ;
import modules ;

use-project /torrent : ../.. ;

BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;
# this is used to make bjam use the same version of python which is executing setup.py
LIBTORRENT_PYTHON_INTERPRETER = [ modules.peek : LIBTORRENT_PYTHON_INTERPRETER ] ;

feature libtorrent-link : shared static : composite propagated ;
feature libtorrent-python-pic : off on : composite propagated link-incompatible ;
feature.compose <libtorrent-python-pic>on : <cflags>-fPIC ;

# when invoking the install_module target, this feature can be specified to
# install the python module to a specific directory
feature python-install-path : : free path ;

# when not specifying a custom install path, this controls whether to install
# the python module in the system directory or user-specifc directory
feature python-install-scope : user system : ;

# this is just to force boost build to pick the desired python target when using LIBTORRENT_PYTHON_INTERPRETER
feature libtorrent-python : on ;

if $(LIBTORRENT_PYTHON_INTERPRETER)
{
	echo "using python interpreter at: " $(LIBTORRENT_PYTHON_INTERPRETER) ;
	using python : : "$(LIBTORRENT_PYTHON_INTERPRETER)" : : : <libtorrent-python>on ;
}

if $(BOOST_ROOT)
{
	use-project /boost : $(BOOST_ROOT) ;
	alias boost_python : /boost/python//boost_python : : : <include>$(BOOST_ROOT) ;
}
else
{
	local boost-lib-search-path =
		<search>/opt/local/lib
		<search>/usr/lib
		<search>/usr/local/lib
		<search>/sw/lib
		<search>/usr/g++/lib
		;

	local boost-include-path =
		<include>/opt/local/include
		<include>/usr/local/include
		<include>/usr/sfw/include
	;

	rule boost_python_version ( name : type ? : properties * )
	{
		local py-version = [ $(properties).get <python> ] ;
		local boost-python-lib = "boost_python" [ SPLIT_BY_CHARACTERS $(py-version) : "." ] ;

		if $(type) in SEARCHED_LIB
		{
			return $(boost-python-lib:J) ;
		}
		return ;
	}

	lib boost_python : : <tag>@boost_python_version : : $(boost-include-path) ;
}


rule libtorrent_linking ( properties * )
{
	local result ;

	if ! <target-os>windows in $(properties)
		&& <toolset>gcc in $(properties)
		&& <libtorrent-link>static in $(properties)
	{
		result += <libtorrent-python-pic>on ;
	}

	if <toolset>gcc in $(properties)
		|| <toolset>darwin in $(properties)
		|| <toolset>clang in $(properties)
		|| <toolset>clang-darwin in $(properties)
	{
		# hide non-external symbols
		result += <cflags>-fvisibility=hidden ;
		result += <cxxflags>-fvisibility-inlines-hidden ;

		if ( <toolset>gcc in $(properties) )
		{
			 result += <linkflags>-Wl,-Bsymbolic ;
		}
	}

	if <link>static in $(properties)
	{
		ECHO "WARNING: you probably want to specify libtorrent-link=static rather than link=static" ;
	}

	if <boost-link>shared in $(properties)
	{
		result += <library>boost_python/<link>shared/<warnings>off ;
	}
	else
	{
		result += <library>boost_python/<link>static/<warnings>off ;
	}

	if <libtorrent-link>shared in $(properties)
	{
		result += <library>/torrent//torrent/<link>shared ;
	}
	else
	{
		result += <library>/torrent//torrent/<link>static ;
	}

	return $(result) ;
}

# this is a copy of the rule from boost-build's python-extension, but without
# specifying <suppress-import-lib>no as a mandatory property. That property
# would otherwise cause build failures because it suppresses linking against the
# runtime library and kernel32 on windows

rule my-python-extension ( name : sources * : requirements * : default-build * :
	usage-requirements * )
{
	requirements += <use>/python//python_for_extensions ;

	local project = [ project.current ] ;

	targets.main-target-alternative
		[ new typed-target $(name) : $(project) : PYTHON_EXTENSION
			: [ targets.main-target-sources $(sources) : $(name) ]
			: [ targets.main-target-requirements $(requirements) : $(project) ]
			: [ targets.main-target-default-build $(default-build) : $(project) ]
		] ;
}

my-python-extension libtorrent
	: # sources
	src/module.cpp
	src/sha1_hash.cpp
	src/converters.cpp
	src/create_torrent.cpp
	src/fingerprint.cpp
	src/utility.cpp
	src/session.cpp
	src/entry.cpp
	src/torrent_info.cpp
	src/string.cpp
	src/torrent_handle.cpp
	src/torrent_status.cpp
	src/session_settings.cpp
	src/version.cpp
	src/alert.cpp
	src/datetime.cpp
	src/peer_info.cpp
	src/ip_filter.cpp
	src/magnet_uri.cpp
	src/error_code.cpp
	: # requirements
	<include>src
	<toolset>gcc:<cxxflags>-Wno-deprecated-declarations
	<toolset>darwin:<cxxflags>-Wno-deprecated-declarations
	<toolset>darwin:<cxxflags>-Wno-unused-command-line-argument
	<conditional>@libtorrent_linking
	<crypto>openssl:<library>/torrent//ssl
	<crypto>openssl:<library>/torrent//crypto
	# C4268: 'identifier' : 'const' static/global data initialized
	#		with compiler generated default constructor fills the object with zeros
	<toolset>msvc:<cflags>/wd4268
	: # default-build
	<warnings>all
	<cxxstd>17
	: # usage-requirements
	<suppress-import-lib>false
	;

rule python-install-dir ( properties * )
{
	local install-dir = [ feature.get-values python-install-path : $(properties) ] ;
	if ( $(install-dir) != "" )
	{
		# if the user has provided an install location, use that one
		return <location>$(install-dir) ;
	}

	local python-interpreter = [ feature.get-values python.interpreter : $(properties) ] ;
	if ( $(python-interpreter) = "" )
	{
		return <location>. ;
	}

	# sys.path are defined differently between python2 and python3

	local python-path ;
	if <python-install-scope>system in $(properties)
	{
		python-path = [ SHELL "$(python-interpreter) -c \"import distutils.sysconfig; import sys; sys.stdout.write(distutils.sysconfig.get_python_lib())\"" ] ;
	}
	else
	{
		python-path = [ SHELL "$(python-interpreter) -c \"import site; import sys; sys.stdout.write(site.USER_SITE)\"" ] ;
	}

	if $(python-path) = ""
	{
		return <location>. ;
	}

	ECHO "python install directory:" $(python-path) ;
	return <location>$(python-path) ;
}

install install_module
	: libtorrent
	: <conditional>@python-install-dir
	<install-type>PYTHON_EXTENSION
	;

explicit install_module ;

install stage_module
	: libtorrent
	: <location>.
	<install-type>PYTHON_EXTENSION
	: <cxxstd>17
	;

install stage_dependencies
	: /torrent//torrent
	boost_python
	: <location>dependencies
	<install-dependencies>on
	<install-type>SHARED_LIB
	: <cxxstd>17
	;

explicit stage_module ;
explicit stage_dependencies ;
